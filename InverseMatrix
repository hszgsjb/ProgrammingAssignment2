#makeCacheMatrix is a function that returns a list of functions
# set    set the value of a matrix
# get    get the value of a matrix
# setinverse   set the inverse of the matrix
# getinverse   get the inverse of the matrix

makeCacheMatrix <- function (x=matrix()){
          
          # holds the cached value as NULL initially
          cache <- NULL
          
          # store a matrix
          set <- function(y){
                x <<-y
                cache <<-NULL
          }
          
          # return the stored matrix
          get <- function(){
                 x
          }

          # cache the inversed matrix
          setinverse <- function(solve){
                   cache<<-solve
          }
          
          # get the inversed matrix
          getinverse <- function(){
                 cache
          }
          # return a list 
          list(set=set, get=get,setinverse=setinverse,getinverse=getinverse)
}



#The following cacheSolve function calculates the inversed matrix created with
#the above function.



cacheSolve <- function(x, ...) {
        # define the cache value
        cache <- x$getinverse()
        # if the cache value exists, then return the value and a message
        if(!is.null(cache)) {
                message("getting cached data")
                return(cache)
        }
        
        # otherwise get the matrix, calculate the inverse and store it in cache
        data <- x$get()
        cache <- solve(data)
        x$setinverse(cache)
        
        # return the cache
        cache
}
